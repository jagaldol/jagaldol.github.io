{"version":3,"file":"component---src-pages-projects-index-tsx-e58372164d32818534f9.js","mappings":"uJAGe,SAASA,EAAY,GAAwD,IAAxD,MAAEC,EAAK,OAAEC,GAA6C,EACxF,MAAM,EAACC,EAAU,EAAEC,IAAiBC,EAAAA,EAAAA,WAAS,IACvC,EAACC,EAAS,EAAEC,IAAgBF,EAAAA,EAAAA,WAAS,GAErCG,GAAaC,EAAAA,EAAAA,QAA8B,MAC3CC,GAAaD,EAAAA,EAAAA,QAA8B,MAE3CE,EAAkBA,KACtB,GAAIH,EAAWI,QAAS,CACtB,MAAMC,EAAOL,EAAWI,QAAQE,wBAC1BC,EAAeF,EAAKG,KAAO,GAAKH,EAAKI,QAAUC,OAAOC,YAE5DZ,EAAaQ,EACf,GA+BF,OA5BAK,EAAAA,EAAAA,YAAU,KACJd,IACGH,IACHC,GAAc,GACVM,EAAWE,SACbS,aAAaX,EAAWE,SAE1BF,EAAWE,QAAUU,YAAW,KAC9BlB,GAAc,EAAM,GACnB,MAEP,GACC,CAACE,KAEJc,EAAAA,EAAAA,YAAU,KACRF,OAAOK,iBAAiB,SAAUZ,GAClCO,OAAOK,iBAAiB,SAAUZ,GAClCA,IAEO,KACLO,OAAOM,oBAAoB,SAAUb,GACrCO,OAAOM,oBAAoB,SAAUb,GACjCD,EAAWE,SACbS,aAAaX,EAAWE,QAC1B,IAED,IAGDa,EAAAA,cAAAA,MAAAA,CACEC,IAAKlB,EACLmB,UAAS,kDAAmDxB,EAAa,cAAgB,IAAE,2HAE3FsB,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,qEAAqE1B,GACnFwB,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,yGACZzB,EAAO0B,KAAKC,GACXJ,EAAAA,cAAAA,MAAAA,CAAKK,IAAKD,EAAOF,UAAU,OACzBF,EAAAA,cAACM,EAAAA,EAAK,CAACC,KAAMH,QAMzB,C,uHCpBA,UAnCuCI,IAA6B,IAA5B,KAAEC,GAAqB,EAC7D,MAAMC,EAAWD,EAAKE,OAAOC,MAE7B,OACEZ,EAAAA,cAACa,EAAAA,EAAM,KACLb,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,kCACbF,EAAAA,cAAAA,KAAAA,CAAIE,UAAU,uBAAsB,gBACpCF,EAAAA,cAAAA,MAAAA,CAAKE,UAAU,gHACZQ,EAASP,KAAKW,IACb,MAAMC,GAAQC,EAAAA,EAAAA,GAASF,EAAQG,YAAYF,OAC3C,OACEf,EAAAA,cAACkB,EAAAA,KAAI,CACHb,IAAKS,EAAQK,GACbC,GAAIN,EAAQG,YAAYI,KACxBnB,UAAU,qIAETa,EACCf,EAAAA,cAACsB,EAAAA,EAAW,CACVC,IAAQT,EAAQG,YAAYzC,MAAK,UACjCgD,QAAQ,QACRT,MAAOA,EACPb,UAAU,0DACVuB,UAAU,YAEV,KACJzB,EAAAA,cAACzB,EAAAA,EAAW,CAACC,MAAOsC,EAAQG,YAAYzC,MAAOC,OAAQqC,EAAQG,YAAYS,QACtE,MAKR,EAMN,MAoBMC,EAAeA,IAAM3B,EAAAA,cAAAA,QAAAA,KAAO,sB","sources":["webpack://app/./src/components/ProjectLink.tsx","webpack://app/./src/pages/projects/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport Badge from '@/components/Badge'\n\nexport default function ProjectLink({ title, stacks }: { title: string; stacks: string[] }) {\n  const [applyClass, setApplyClass] = useState(false)\n  const [isVisible, setIsVisible] = useState(false)\n\n  const elementRef = useRef<HTMLDivElement | null>(null) // 요소의 참조를 저장합니다.\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null) // 요소의 참조를 저장합니다.\n\n  const checkVisibility = () => {\n    if (elementRef.current) {\n      const rect = elementRef.current.getBoundingClientRect()\n      const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight\n\n      setIsVisible(fullyVisible)\n    }\n  }\n\n  useEffect(() => {\n    if (isVisible) {\n      if (!applyClass) {\n        setApplyClass(true)\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current)\n        }\n        timeoutRef.current = setTimeout(() => {\n          setApplyClass(false) // 1초 후 클래스 제거\n        }, 1000)\n      }\n    }\n  }, [isVisible])\n\n  useEffect(() => {\n    window.addEventListener('scroll', checkVisibility)\n    window.addEventListener('resize', checkVisibility)\n    checkVisibility() // 초기 로드 시에도 확인\n\n    return () => {\n      window.removeEventListener('scroll', checkVisibility)\n      window.removeEventListener('resize', checkVisibility)\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n\n  return (\n    <div\n      ref={elementRef}\n      className={`absolute left-0 top-0 w-full h-full opacity-0 ${applyClass ? 'opacity-100' : ''} group-hover:opacity-100 bg-gradient-to-tl from-main-theme to-main-theme/40 z-10 transition-all duration-500 text-white`}\n    >\n      <h3 className=\"absolute right-0 bottom-0 text-3xl -translate-x-8 -translate-y-10\">{title}</h3>\n      <div className=\"absolute right-0 bottom-0 -translate-x-7 -translate-y-3 flex gap-1 justify-end items-center flex-wrap\">\n        {stacks.map((value: string) => (\n          <div key={value} className=\"h-6\">\n            <Badge name={value} />\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import type { HeadFC, PageProps } from 'gatsby'\nimport { graphql, Link } from 'gatsby'\nimport React from 'react'\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport Layout from '@/components/Layout'\nimport ProjectLink from '@/components/ProjectLink'\n\nconst IndexPage: React.FC<PageProps> = ({ data }: { data: any }) => {\n  const projects = data.allMdx.nodes\n\n  return (\n    <Layout>\n      <div className=\"mt-5 flex flex-col text-center\">\n        <h1 className=\"text-3xl mt-8 mb-16\">Project List</h1>\n        <div className=\"grid grid-cols-3 max-lg:grid-cols-2 py-5 max-md:grid-cols-1 mx-20 max-2xl:mx-10 max-md:mx-0 gap-x-3 gap-y-10\">\n          {projects.map((project: any) => {\n            const image = getImage(project.frontmatter.image)\n            return (\n              <Link\n                key={project.id}\n                to={project.frontmatter.slug}\n                className=\"relative w-full h-full bg-gradient-to-bl to-gray-300 from-gray-100 drop-shadow-lg flex items-center justify-center max-h-96 group\"\n              >\n                {image ? (\n                  <GatsbyImage\n                    alt={`${project.frontmatter.title} 대표 이미지`}\n                    loading=\"eager\"\n                    image={image}\n                    className=\"h-full group-hover:scale-90 transition-all duration-500\"\n                    objectFit=\"contain\"\n                  />\n                ) : null}\n                <ProjectLink title={project.frontmatter.title} stacks={project.frontmatter.stack} />\n              </Link>\n            )\n          })}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query Projects {\n    allMdx(sort: { frontmatter: { end_date: DESC } }) {\n      nodes {\n        id\n        frontmatter {\n          slug\n          title\n          stack\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, width: 500)\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const Head: HeadFC = () => <title>Project | Hyejun An</title>\n"],"names":["ProjectLink","title","stacks","applyClass","setApplyClass","useState","isVisible","setIsVisible","elementRef","useRef","timeoutRef","checkVisibility","current","rect","getBoundingClientRect","fullyVisible","top","bottom","window","innerHeight","useEffect","clearTimeout","setTimeout","addEventListener","removeEventListener","React","ref","className","map","value","key","Badge","name","_ref","data","projects","allMdx","nodes","Layout","project","image","getImage","frontmatter","Link","id","to","slug","GatsbyImage","alt","loading","objectFit","stack","Head"],"sourceRoot":""}