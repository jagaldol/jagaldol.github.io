{"version":3,"file":"component---src-pages-projects-index-tsx-8ca648bb3e5a2e75fa57.js","mappings":"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","sources":["webpack://app/./src/components/ProjectLink.tsx","webpack://app/./src/pages/projects/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport Badge from '@/components/Badge'\r\n\r\nexport default function ProjectLink({ title, stacks }: { title: string; stacks: string[] }) {\r\n  const [applyClass, setApplyClass] = useState(false)\r\n  const [isVisible, setIsVisible] = useState(false)\r\n\r\n  const elementRef = useRef<HTMLDivElement | null>(null) // 요소의 참조를 저장합니다.\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null) // 요소의 참조를 저장합니다.\r\n\r\n  const checkVisibility = () => {\r\n    if (elementRef.current) {\r\n      const rect = elementRef.current.getBoundingClientRect()\r\n      const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight\r\n\r\n      setIsVisible(fullyVisible)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isVisible) {\r\n      if (!applyClass) {\r\n        setApplyClass(true)\r\n        if (timeoutRef.current) {\r\n          clearTimeout(timeoutRef.current)\r\n        }\r\n        timeoutRef.current = setTimeout(() => {\r\n          setApplyClass(false) // 1초 후 클래스 제거\r\n        }, 1000)\r\n      }\r\n    }\r\n  }, [isVisible])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', checkVisibility)\r\n    window.addEventListener('resize', checkVisibility)\r\n    checkVisibility() // 초기 로드 시에도 확인\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', checkVisibility)\r\n      window.removeEventListener('resize', checkVisibility)\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      ref={elementRef}\r\n      className={`absolute left-0 top-0 w-full h-full opacity-0 ${applyClass ? 'opacity-100' : ''} group-hover:opacity-100 bg-gradient-to-tl from-main-theme to-main-theme/40 z-10 transition-all duration-500 text-white`}\r\n    >\r\n      <h3 className=\"absolute right-0 bottom-0 text-3xl max-xl:text-2xl -translate-x-8 max-md:-translate-x-6 -translate-y-10\">\r\n        {title}\r\n      </h3>\r\n      <div className=\"absolute right-0 bottom-0 -translate-x-7 max-md:-translate-x-5 -translate-y-3 flex gap-1 justify-end items-center flex-wrap\">\r\n        {stacks.map((value: string) => (\r\n          <div key={value} className=\"h-6\">\r\n            <Badge name={value} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import type { HeadFC, PageProps } from 'gatsby'\r\nimport { graphql, Link } from 'gatsby'\r\nimport React from 'react'\r\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image'\r\nimport Layout from '@/components/Layout'\r\nimport ProjectLink from '@/components/ProjectLink'\r\nimport SEO from '@/components/SEO'\r\n\r\nconst IndexPage: React.FC<PageProps> = ({ data }: { data: any }) => {\r\n  const mainProjects = data.main.nodes\r\n  const etcProjects = data.etc.nodes\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"mt-5 flex flex-col text-center\">\r\n        <h1 className=\"text-3xl my-8\">Project List</h1>\r\n        <h2 className=\"text-xl my-4\">Main Project</h2>\r\n        <div className=\"grid grid-cols-3 max-lg:grid-cols-2 py-5 mb-20 max-md:grid-cols-1 mx-20 max-2xl:mx-10 max-md:mx-0 gap-x-3 gap-y-10\">\r\n          {mainProjects.map((project: any) => {\r\n            const image = getImage(project.frontmatter.image)\r\n            return (\r\n              <Link\r\n                key={project.id}\r\n                to={`/projects/${project.frontmatter.slug}`}\r\n                className=\"relative w-full h-full bg-gradient-to-bl to-gray-300 from-gray-100 drop-shadow-lg flex items-center justify-center max-h-96 group\"\r\n              >\r\n                {image ? (\r\n                  <GatsbyImage\r\n                    alt={`${project.frontmatter.title} 대표 이미지`}\r\n                    loading=\"eager\"\r\n                    image={image}\r\n                    className=\"h-full group-hover:scale-90 transition-all duration-500\"\r\n                    objectFit=\"contain\"\r\n                  />\r\n                ) : null}\r\n                <ProjectLink title={project.frontmatter.title} stacks={project.frontmatter.stack} />\r\n              </Link>\r\n            )\r\n          })}\r\n        </div>\r\n        <h2 className=\"text-xl my-4\" id=\"etc\">\r\n          ETC\r\n        </h2>\r\n        <div className=\"grid grid-cols-3 max-lg:grid-cols-2 py-5 mb-20 max-md:grid-cols-1 mx-20 max-2xl:mx-10 max-md:mx-0 gap-x-3 gap-y-10\">\r\n          {etcProjects.map((project: any) => {\r\n            const image = getImage(project.frontmatter.image)\r\n            return (\r\n              <Link\r\n                key={project.id}\r\n                to={`/projects/${project.frontmatter.slug}`}\r\n                className=\"relative w-full h-full bg-gradient-to-bl to-gray-300 from-gray-100 drop-shadow-lg flex items-center justify-center max-h-96 group\"\r\n              >\r\n                {image ? (\r\n                  <GatsbyImage\r\n                    alt={`${project.frontmatter.title} 대표 이미지`}\r\n                    loading=\"eager\"\r\n                    image={image}\r\n                    className=\"h-full group-hover:scale-90 transition-all duration-500\"\r\n                    objectFit=\"contain\"\r\n                  />\r\n                ) : null}\r\n                <ProjectLink title={project.frontmatter.title} stacks={project.frontmatter.stack} />\r\n              </Link>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const query = graphql`\r\n  query Projects {\r\n    main: allMdx(\r\n      sort: { frontmatter: { end_date: DESC } }\r\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/main/*.mdx\" } } }\r\n    ) {\r\n      nodes {\r\n        id\r\n        frontmatter {\r\n          slug\r\n          title\r\n          stack\r\n          image {\r\n            childImageSharp {\r\n              gatsbyImageData(placeholder: BLURRED, width: 500)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    etc: allMdx(\r\n      sort: { frontmatter: { end_date: DESC } }\r\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/etc/*.mdx\" } } }\r\n    ) {\r\n      nodes {\r\n        id\r\n        frontmatter {\r\n          slug\r\n          title\r\n          stack\r\n          image {\r\n            childImageSharp {\r\n              gatsbyImageData(placeholder: BLURRED, width: 500)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const Head: HeadFC = ({ data }: any) => (\r\n  <SEO\r\n    title=\"Project\"\r\n    description=\"지금까지 수행해온 프로젝트 모음입니다.\"\r\n    pathname=\"/projects/\"\r\n    image={`/og-image/${data.main.nodes[0].frontmatter.slug}/thumbnail.png`}\r\n  />\r\n)\r\n"],"names":["ProjectLink","title","stacks","applyClass","setApplyClass","useState","isVisible","setIsVisible","elementRef","useRef","timeoutRef","checkVisibility","current","rect","getBoundingClientRect","fullyVisible","top","bottom","window","innerHeight","useEffect","clearTimeout","setTimeout","addEventListener","removeEventListener","React","ref","className","map","value","key","Badge","name","_ref","data","mainProjects","main","nodes","etcProjects","etc","Layout","project","image","getImage","frontmatter","Link","id","to","slug","GatsbyImage","alt","loading","objectFit","stack","Head","_ref2","SEO","description","pathname"],"sourceRoot":""}