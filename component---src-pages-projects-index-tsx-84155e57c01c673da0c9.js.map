{"version":3,"file":"component---src-pages-projects-index-tsx-84155e57c01c673da0c9.js","mappings":"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","sources":["webpack://app/./src/components/ProjectLink.tsx","webpack://app/./src/containers/project/ProjectConatiner.tsx","webpack://app/./src/pages/projects/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport Badge from '@/components/Badge'\r\n\r\nexport default function ProjectLink({ title, stacks }: { title: string; stacks: string[] }) {\r\n  const [applyClass, setApplyClass] = useState(false)\r\n  const [isVisible, setIsVisible] = useState(false)\r\n\r\n  const elementRef = useRef<HTMLDivElement | null>(null) // 요소의 참조를 저장합니다.\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null) // 요소의 참조를 저장합니다.\r\n\r\n  const checkVisibility = () => {\r\n    if (elementRef.current) {\r\n      const rect = elementRef.current.getBoundingClientRect()\r\n      const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight\r\n\r\n      setIsVisible(fullyVisible)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isVisible) {\r\n      if (!applyClass) {\r\n        setApplyClass(true)\r\n        if (timeoutRef.current) {\r\n          clearTimeout(timeoutRef.current)\r\n        }\r\n        timeoutRef.current = setTimeout(() => {\r\n          setApplyClass(false) // 1초 후 클래스 제거\r\n        }, 1000)\r\n      }\r\n    }\r\n  }, [isVisible])\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', checkVisibility)\r\n    window.addEventListener('resize', checkVisibility)\r\n    checkVisibility() // 초기 로드 시에도 확인\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', checkVisibility)\r\n      window.removeEventListener('resize', checkVisibility)\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current)\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div\r\n      ref={elementRef}\r\n      className={`absolute left-0 top-0 w-full h-full opacity-0 ${applyClass ? 'opacity-100' : ''} group-hover:opacity-100 bg-gradient-to-tl from-main-theme to-main-theme/40 z-10 transition-all duration-500 text-white`}\r\n    >\r\n      <h3 className=\"absolute right-0 bottom-0 text-3xl max-xl:text-2xl -translate-x-8 max-md:-translate-x-6 -translate-y-10\">\r\n        {title}\r\n      </h3>\r\n      <div className=\"absolute right-0 bottom-0 -translate-x-7 max-md:-translate-x-5 -translate-y-3 flex gap-1 justify-end items-center flex-wrap\">\r\n        {stacks.map((value: string) => (\r\n          <div key={value} className=\"h-6\">\r\n            <Badge name={value} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { Link } from 'gatsby'\nimport React from 'react'\nimport ProjectLink from '@/components/ProjectLink'\n\nexport default function ProjectContainer({ title, projects }: { title: string; projects: any }) {\n  return (\n    <>\n      <h2 className=\"text-xl my-4\" id={title.replace(' ', '_')}>\n        {title}\n      </h2>\n      <div className=\"grid grid-cols-3 max-lg:grid-cols-2 py-5 mb-20 max-md:grid-cols-1 mx-20 max-2xl:mx-10 max-md:mx-0 gap-x-3 gap-y-10\">\n        {projects.map((project: any) => {\n          const image = getImage(project.frontmatter.image)\n          return (\n            <Link\n              key={project.id}\n              to={`/projects/${project.frontmatter.slug}`}\n              className=\"relative w-full h-full bg-gradient-to-bl to-gray-300 from-gray-100 drop-shadow-lg flex items-center justify-center max-h-96 group\"\n            >\n              {image ? (\n                <GatsbyImage\n                  alt={`${project.frontmatter.title} 대표 이미지`}\n                  loading=\"eager\"\n                  image={image}\n                  className=\"h-full group-hover:scale-90 transition-all duration-500\"\n                  objectFit=\"contain\"\n                />\n              ) : null}\n              <ProjectLink title={project.frontmatter.title} stacks={project.frontmatter.stack} />\n            </Link>\n          )\n        })}\n      </div>\n    </>\n  )\n}\n","import type { HeadFC, PageProps } from 'gatsby'\r\nimport { graphql } from 'gatsby'\r\nimport React from 'react'\r\nimport Layout from '@/components/Layout'\r\nimport SEO from '@/components/SEO'\r\nimport ProjectContainer from '@/containers/project/ProjectConatiner'\r\n\r\nconst IndexPage: React.FC<PageProps> = ({ data }: { data: any }) => {\r\n  const mainProjects = data.main.nodes\r\n  const minorProjects = data.minor.nodes\r\n  const toyProjects = data.toy.nodes\r\n\r\n  return (\r\n    <Layout>\r\n      <div className=\"mt-5 flex flex-col text-center\">\r\n        <h1 className=\"text-3xl my-8\">Project List</h1>\r\n        <ProjectContainer title=\"Main Project\" projects={mainProjects} />\r\n        <ProjectContainer title=\"Minor Project\" projects={minorProjects} />\r\n        <ProjectContainer title=\"Toy Project\" projects={toyProjects} />\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const query = graphql`\r\n  query Projects {\r\n    main: allMdx(\r\n      sort: { frontmatter: { end_date: DESC } }\r\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/main/*.mdx\" } } }\r\n    ) {\r\n      nodes {\r\n        id\r\n        frontmatter {\r\n          slug\r\n          title\r\n          stack\r\n          image {\r\n            childImageSharp {\r\n              gatsbyImageData(placeholder: BLURRED, width: 500)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    minor: allMdx(\r\n      sort: { frontmatter: { end_date: DESC } }\r\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/minor/*.mdx\" } } }\r\n    ) {\r\n      nodes {\r\n        id\r\n        frontmatter {\r\n          slug\r\n          title\r\n          stack\r\n          image {\r\n            childImageSharp {\r\n              gatsbyImageData(placeholder: BLURRED, width: 500)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    toy: allMdx(\r\n      sort: { frontmatter: { end_date: DESC } }\r\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/toy/*.mdx\" } } }\r\n    ) {\r\n      nodes {\r\n        id\r\n        frontmatter {\r\n          slug\r\n          title\r\n          stack\r\n          image {\r\n            childImageSharp {\r\n              gatsbyImageData(placeholder: BLURRED, width: 500)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const Head: HeadFC = ({ data }: any) => (\r\n  <SEO\r\n    title=\"Project\"\r\n    description=\"지금까지 수행해온 프로젝트 모음입니다.\"\r\n    pathname=\"/projects/\"\r\n    image={`/og-image/${data.main.nodes[0].frontmatter.slug}/thumbnail.png`}\r\n  />\r\n)\r\n"],"names":["ProjectLink","title","stacks","applyClass","setApplyClass","useState","isVisible","setIsVisible","elementRef","useRef","timeoutRef","checkVisibility","current","rect","getBoundingClientRect","fullyVisible","top","bottom","window","innerHeight","useEffect","clearTimeout","setTimeout","addEventListener","removeEventListener","React","ref","className","map","value","key","Badge","name","ProjectContainer","projects","id","replace","project","image","getImage","frontmatter","Link","to","slug","GatsbyImage","alt","loading","objectFit","stack","_ref","data","mainProjects","main","nodes","minorProjects","minor","toyProjects","toy","Layout","Head","_ref2","SEO","description","pathname"],"sourceRoot":""}