{"version":3,"file":"component---src-pages-projects-index-tsx-0c125775ab24734d4d73.js","mappings":"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","sources":["webpack://app/./src/components/ProjectLink.tsx","webpack://app/./src/containers/project/ProjectConatiner.tsx","webpack://app/./src/pages/projects/index.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useBreakpoint } from 'gatsby-plugin-breakpoints'\nimport Badge from '@/components/Badge'\n\nexport default function ProjectLink({ title, stacks }: { title: string; stacks: string[] }) {\n  const [applyClass, setApplyClass] = useState(false)\n  const [isVisible, setIsVisible] = useState(false)\n\n  const elementRef = useRef<HTMLDivElement | null>(null) // 요소의 참조를 저장합니다.\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null) // 요소의 참조를 저장합니다.\n\n  const breakpoints = useBreakpoint()\n\n  const checkVisibility = () => {\n    if (elementRef.current) {\n      const rect = elementRef.current.getBoundingClientRect()\n      const fullyVisible = rect.top >= 0 && rect.bottom <= window.innerHeight\n\n      setIsVisible(fullyVisible)\n    }\n  }\n\n  useEffect(() => {\n    if (isVisible && breakpoints.md) {\n      if (!applyClass) {\n        setApplyClass(true)\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current)\n        }\n        timeoutRef.current = setTimeout(() => {\n          setApplyClass(false) // 1초 후 클래스 제거\n        }, 1000)\n      }\n    }\n  }, [isVisible])\n\n  useEffect(() => {\n    window.addEventListener('scroll', checkVisibility)\n    window.addEventListener('resize', checkVisibility)\n    checkVisibility() // 초기 로드 시에도 확인\n\n    return () => {\n      window.removeEventListener('scroll', checkVisibility)\n      window.removeEventListener('resize', checkVisibility)\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n\n  return (\n    <div\n      ref={elementRef}\n      className={`absolute left-0 top-0 w-full h-full opacity-0 ${applyClass ? 'opacity-100' : ''} group-hover:opacity-100 bg-gradient-to-tl from-main-theme to-main-theme/40 z-10 transition-all duration-500 text-white`}\n    >\n      <h3 className=\"absolute right-0 bottom-0 text-3xl max-xl:text-2xl -translate-x-8 max-md:-translate-x-6 -translate-y-10\">\n        {title}\n      </h3>\n      <div className=\"absolute right-0 bottom-0 -translate-x-7 max-md:-translate-x-5 -translate-y-3 flex gap-1 justify-end items-center flex-wrap\">\n        {stacks.map((value: string) => (\n          <div key={value} className=\"h-6\">\n            <Badge name={value} />\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n","import { GatsbyImage, getImage } from 'gatsby-plugin-image'\nimport { Link } from 'gatsby'\nimport React from 'react'\nimport ProjectLink from '@/components/ProjectLink'\n\nexport default function ProjectContainer({ title, projects }: { title: string; projects: any }) {\n  return (\n    <>\n      <h2 className=\"text-xl my-4\" id={title.replace(' ', '_')}>\n        {title}\n      </h2>\n      <div className=\"grid grid-cols-3 max-lg:grid-cols-2 py-5 mb-20 max-md:grid-cols-1 mx-20 max-2xl:mx-10 max-md:mx-0 gap-x-3 gap-y-10\">\n        {projects.map((project: any) => {\n          const image = getImage(project.frontmatter.image)\n          return (\n            <Link\n              key={project.id}\n              to={`/projects/${project.frontmatter.slug}`}\n              className=\"relative w-full bg-gradient-to-bl to-gray-300 from-gray-100 drop-shadow-lg flex items-center justify-center group\"\n            >\n              {image ? (\n                <GatsbyImage\n                  alt={`${project.frontmatter.title} 대표 이미지`}\n                  loading=\"eager\"\n                  image={image}\n                  className=\"group-hover:scale-90 transition-all duration-500\"\n                  objectFit=\"contain\"\n                />\n              ) : null}\n              <ProjectLink title={project.frontmatter.title} stacks={project.frontmatter.stack} />\n            </Link>\n          )\n        })}\n      </div>\n    </>\n  )\n}\n","import type { HeadFC, PageProps } from 'gatsby'\nimport { graphql } from 'gatsby'\nimport React from 'react'\nimport Layout from '@/components/Layout'\nimport SEO from '@/components/SEO'\nimport ProjectContainer from '@/containers/project/ProjectConatiner'\n\nconst IndexPage: React.FC<PageProps> = ({ data }: { data: any }) => {\n  const aiProjects = data.ai.nodes\n  const webProjects = data.web.nodes\n  const subProjects = data.sub.nodes\n  const toyProjects = data.toy.nodes\n\n  return (\n    <Layout>\n      <div className=\"mt-5 flex flex-col text-center\">\n        <h1 className=\"text-3xl my-8\">Project List</h1>\n        <ProjectContainer title=\"AI Project\" projects={aiProjects} />\n        <ProjectContainer title=\"Web Project\" projects={webProjects} />\n        <ProjectContainer title=\"Sub Project\" projects={subProjects} />\n        <ProjectContainer title=\"Toy Project\" projects={toyProjects} />\n      </div>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query Projects {\n    ai: allMdx(\n      sort: { frontmatter: { end_date: DESC } }\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/ai/*.mdx\" } } }\n    ) {\n      nodes {\n        id\n        frontmatter {\n          slug\n          title\n          stack\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, width: 500)\n              original {\n                src\n              }\n            }\n          }\n        }\n      }\n    }\n    web: allMdx(\n      sort: { frontmatter: { end_date: DESC } }\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/web/*.mdx\" } } }\n    ) {\n      nodes {\n        id\n        frontmatter {\n          slug\n          title\n          stack\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, width: 500)\n              original {\n                src\n              }\n            }\n          }\n        }\n      }\n    }\n    sub: allMdx(\n      sort: { frontmatter: { end_date: DESC } }\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/sub/*.mdx\" } } }\n    ) {\n      nodes {\n        id\n        frontmatter {\n          slug\n          title\n          stack\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, width: 500)\n            }\n          }\n        }\n      }\n    }\n    toy: allMdx(\n      sort: { frontmatter: { end_date: DESC } }\n      filter: { internal: { contentFilePath: { glob: \"**/src/projects/toy/*.mdx\" } } }\n    ) {\n      nodes {\n        id\n        frontmatter {\n          slug\n          title\n          stack\n          image {\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, width: 500)\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const Head: HeadFC = ({ data }: any) => (\n  <SEO\n    title=\"Project\"\n    description=\"지금까지 수행해온 프로젝트 모음입니다.\"\n    pathname=\"/projects/\"\n    image={data.ai.nodes[0].frontmatter.image.childImageSharp.original.src}\n  />\n)\n"],"names":["ProjectLink","_ref","title","stacks","applyClass","setApplyClass","useState","isVisible","setIsVisible","elementRef","useRef","timeoutRef","breakpoints","useBreakpoint","checkVisibility","current","rect","getBoundingClientRect","fullyVisible","top","bottom","window","innerHeight","useEffect","md","clearTimeout","setTimeout","addEventListener","removeEventListener","React","ref","className","map","value","key","Badge","name","ProjectContainer","projects","id","replace","project","image","getImage","frontmatter","Link","to","slug","GatsbyImage","alt","loading","objectFit","stack","data","aiProjects","ai","nodes","webProjects","web","subProjects","sub","toyProjects","toy","Layout","Head","_ref2","SEO","description","pathname","childImageSharp","original","src"],"sourceRoot":""}